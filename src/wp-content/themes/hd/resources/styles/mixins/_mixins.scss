@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:map';
@use 'sass:color';
@use 'sass:string';

@use '../functions' as func;

@mixin mq-max-width($width: 767px) {
    $width_value: func.fs($width);
    @media only screen and (max-width: #{$width_value}) {
        @content;
    }
}

@mixin mq-min-width($width: 768px) {
    $width_value: func.fs($width);
    @media only screen and (min-width: #{$width_value}) {
        @content;
    }
}

@mixin line-clamp($n: 2) {
    & {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: initial;

        @supports (-webkit-line-clamp: $n) {
            -webkit-line-clamp: $n;
            -webkit-box-orient: vertical;
            display: -webkit-box;
        }
    }
}


@mixin hidden-text {
    border: 0;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    word-wrap: normal !important;
    white-space: nowrap;
}

/// @link http://www.sitepoint.com/centering-with-sass/
@mixin centering-self($width: 300, $height: $width) {
    & {
        position: absolute;
        top: func.subtract(50%, func.fs(func.divide($height, 2)));
        left: func.subtract(50%, func.fs(func.divide($width, 2)));
        width: $width;
        height: $height;
    }
}

@mixin arrow($direction: down, $size: 5px, $color: #000000) {
    width: 0;
    height: 0;

    @if $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    } @else if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    } @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}

@mixin clamp-fs($min: 15px, $max: 30px, $min-width: 375px, $max-width: 1920px, $base: 1.618) {
    $min-rem: func.fs($min);
    $max-rem: func.fs($max);
    $min-width-rem: func.fs($min-width);
    $max-width-rem: func.fs($max-width);

    $min-val: func.strip-unit($min-rem);
    $max-val: func.strip-unit($max-rem);
    $min-width-val: func.strip-unit($min-width-rem);
    $max-width-val: func.strip-unit($max-width-rem);

    @if $min-val > $max-val {
        $tmp: $min;
        $min: $max;
        $max: $tmp;

        $min-rem: func.fs($min);
        $max-rem: func.fs($max);
        $min-val: func.strip-unit($min-rem);
        $max-val: func.strip-unit($max-rem);
    }

    // min = max
    @if $min-val == $max-val {
        & {
            font-size: $min-rem;
            line-height: $min-rem * $base;
        }
    }

    // min < max
    @if $min-val < $max-val {
        $slope: func.divide(
                                ($max-val - $min-val),
                                ($max-width-val - $min-width-val)
        );
        $intercept: $min-val - $slope * $min-width-val;
        $font-clamp: clamp(
                #{$min-rem},
                #{$intercept}rem + #{$slope * 100}vw,
                #{$max-rem}
        );

        $lh-intercept: $min-val * $base - $slope * $base * $min-width-val;
        $line-height-clamp: clamp(
                #{$min-rem * $base},
                #{$lh-intercept}rem + #{$slope * $base * 100}vw,
                #{$max-rem * $base}
        );

        @if $base == 0 {
            $line-height-clamp: inherit;
        }

        & {
            font-size: $font-clamp;
            line-height: $line-height-clamp;
        }
    }
}

@mixin font-face($font-family, $font-style: normal, $font-weight: 400, $file_name, $base: '../fonts') {
    $base: string.unquote($base);
    $version: string.unique_id();

    @font-face {
        font-family: string.quote($font-family);
        font-style: $font-style;
        font-weight: $font-weight;
        font-display: swap;
        src: url('#{$base}/WOFF2/#{$file_name}.woff2?v=#{$version}') format('woff2'),
        url('#{$base}/TTF/#{$file_name}.ttf?v=#{$version}') format('truetype'),
        url('#{$base}/OTF/#{$file_name}.otf?v=#{$version}') format('opentype');
    }
}

@mixin responsive-height($multiplier: 100, $css_property: height, $admin_bar: false) {
    @if $admin_bar {
        #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier} - 32px);
    } @else {
        #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier});
    }

    @supports (height: 100dvh) {
        @if $admin_bar {
            #{$css_property}: calc(#{$multiplier}dvh - 32px);
        } @else {
            #{$css_property}: #{$multiplier}dvh;
        }
    }

    @media only screen and (max-width: 782px) {
        @if $admin_bar {
            #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier} - 46px);

            @supports (height: 100dvh) {
                #{$css_property}: calc(#{$multiplier}dvh - 46px);
            }
        }
    }
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@function calculate-flex-width($columns: 12, $span: 1, $gap: 0) {
    @if meta.type-of($columns) == "number" and meta.type-of($span) == "number" and $columns > 0 and $span > 0 {
        @if $columns == $span {
            @return math.percentage(1);
        } @else if $columns > $span {
            @if meta.type-of($gap) == bool or $gap < 0 {
                $gap: 0;
            }

            $width: math.percentage(func.divide($span, $columns));
            $gap_adjust: func.fs(($columns - $span) * func.divide($gap, $columns));

            @return func.subtract($width, $gap_adjust);
        }
    }

    @return 0;
}

@mixin flex-self($total: 12, $n: 1, $gap: 0, $important: false) {
    $width: calculate-flex-width($total, $n, $gap);
    @if $width > 0 {
        & {
            width: #{$width}#{if($important, ' !important', '')};
        }
    }
}

@mixin flex-basis($n: 1, $gap: 0, $important: false) {
    $grid-columns: 12;
    @include flex-self($grid-columns, $n, $gap, $important);
}
